#summary Brainstorming for development of XIONDoc 1.3.

= Introduction =

The current version of XIONDoc, XIONDoc 1.2, is a horrible mishmash of regexes that parse an ungodly hybrid of not-really-XML and Wiki-esque syntax. A list of the many things that it does wrong as a result are described in Issue 11.

The next version of XIONDoc, XIONDoc 1.3, is going to do actual proper XML parsing, with no more Wiki-esque syntax crap. This page serves as a brainstorming area for what that XML syntax will be.

= Terms =

A term is a particular vocabulary item in an XION dialect.

A term element contains section elements.

In XIONDoc 1.2, each term had a major section in an HTML file containing all terms of a certain type. This is stupid -- it means the browser has to load the documentation for all those terms instead of just the one term we're after, and it's terrible for SEO. In XIONDoc 1.3, each term will have its own independent HTML page.

Each term should have navigation that allows you to go to the previous or next term alphabetically, both of the same type and overall.

`<structure>` - a control structure, such as `if` or `repeat`.

`<keyword>` - a miscellaneous keyword, such as `of` or `the`.

`<event>` - an event handler, such as `keyDown` or `mouseUp`.

`<command>` - a command, such as `put` or `sort`.

`<function>` - a function, such as `sqrt` or `atan2`.

`<datatype>` - a data type, such as `number` or `string`.

`<property>` - a property, such as `itemDelimiter` or `textFont`.

`<operator>` - an operator, such as `+` or `contains`.

`<constant>` - a constant, such as `pi` or `ten`.

`<ordinal>` - an ordinal, such as `third` or `next`.

`<iomethod>` - an I/O method, such as `text` or `binary`.

`<iomanager>` - an I/O manager, such as `URL` or `file`.

`<extlang>` - an external language, such as `appleScript` or `perl`.

`<version>` - something you can get `the version of`.

= Sections =

The documentation for each term can have several sections.

A section element contains block elements.

Each section is rendered with a heading in bold small caps.

`<syntax>` - The syntax of the term, and any notes about the metavariables. Typically includes `<syn>` and `<p>` blocks.

`<examples>` - Examples of the term in use. Typically includes `<scr>` blocks. The heading is rendered as "Example" if there is only one `<scr>` block, or "Examples" if there are multiple `<scr>` blocks.

`<description>` - The description of the term. Typically includes `<p>` and `<table>` blocks.

`<scripts>` - Scripts demonstrating use of the term. Typically includes `<scr>` blocks. The heading is rendered as "Script" if there is only one `<scr>` block, or "Scripts" if there are multiple `<scr>` blocks.

`<notes>` - Other notes about the term. Typically includes `<p>` and `<table>` blocks. The heading is rendered as "Note" if there is only one block, or "Notes" if there are multiple blocks.

`<security>` - Notes specifically about security. Typically includes `<p>` blocks.

`<compatibility>` - Notes specifically about compatibility. Typically includes `<p>` blocks.

= Blocks =

A block is a generalization of a paragraph, basically. I don't really know how else to explain it.

The red rectangles in the following image are outlining blocks:

http://openxion.googlecode.com/svn/wiki/XIONDocXML-Blocks.png

Any block can have an `indent` attribute with a number indicating indentation level. Each indentation level is about half an inch.

== Script Blocks ==

Specified with the `<scr>` tag.

The content is verbatim text -- it cannot include any tags, as any such "tags" will appear literally.

The content is taken literally and split on line breaks. For each line, any trailing whitespace is stripped off. Then any blank lines at the beginning or end are removed.

If and only if any blank lines were removed from the beginning, the leading whitespace of the first remaining line is removed from all lines. Otherwise, all leading whitespace is removed from all lines.

== Syntax Blocks ==

Specified with the `<syn>` tag.

The `<syn>` tag can contain literal text, as well as `<mv>`, `<opt>`, `<ch>`, and `<me/>` tags.

Literal text represents a keyword, and is rendered in monospace type. Whitespace is collapsed to a single space.

The `<mv>` tag can contain only literal text. It represents a metavariable, and is rendered in italic type. Whitespace is collapsed to a single space.

The `<opt>` tag can contain anything the `<syn>` tag can contain. It represents optional syntax, and is rendered surrounded by brackets.

The `<ch>` tag can contain `<ci>` tags. It represents an alternation, and is rendered surrounded by parentheses, with the alternatives delimited by vertical bars.

The `<ci>` tag can contain anything the `<syn>` tag can contain. It represents an alternative inside a `<ch>` tag.

The `<me/>` tag represents the name of the term.

== List Blocks ==

Specified with the `<ul>` or `<ol>` tag.

The `<ul>` or `<ol>` tag can contain `<li>` tags, indicating list items.

The `<li>` tag can contain literal text and spans.

== Table Blocks ==

Specified with the `<table>` tag.

The `<table>` tag can contain `<tr>` tags, indicating table rows.

The `<tr>` tag can contain `<th>` and `<td>` tags, indicating table cells.

The `<th>` or `<td>` tag can contain literal text and spans.

== Paragraph Blocks ==

Specified with the `<p>` tag.

Can contain literal text and spans. Cannot contain blocks. (HTML allows such a thing, but we won't, to make things simpler.)

There is no `<blockquote>`. Instead, use `<p indent="1">`.

= Spans =

Spans are fragments of text that are formatted.

Can contain literal text and further spans.

`<b>` or `<strong>` - bold text

`<i>` or `<em>` - italic text

`<u>` - underlined text

`<s>` - struck-through text

`<sup>` - superscript text

`<sub>` - subscript text

`<big>` - big text

`<small>` - small text

`<c>` or `<tt>` or `<code>` - monospaced text

`<a>` - A hyperlink. Must have an `href` attribute for the link destination. This can be an external URL, or another term. A link to another term looks like `cm:put` or `fn:atan2` or whatever. Links to other terms are rendered in monospace font. The content is optional; if it is empty, the URL or name of the term will be rendered instead.

`<me/>` - The name of this term, rendered in monospace font.

`<br/>` - a line break